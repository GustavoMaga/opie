#############################################################################

####### Compiler, tools and options

CXX	=	$(SYSCONF_CXX) $(QT_CXX_MT)
CXXFLAGS=	$(SYSCONF_CXXFLAGS_QT) $(SYSCONF_CXXFLAGS) -DQCONFIG=\"qpe\"
CC	=	$(SYSCONF_CC) $(QT_C_MT)
CFLAGS	=	$(SYSCONF_CFLAGS) -DQCONFIG=\"qpe\"
INCPATH =	-I$(QPEDIR)/include
LFLAGS	=	$(SYSCONF_LFLAGS_QT) $(SYSCONF_RPATH_QT) $(SYSCONF_LFLAGS) $(QT_LFLAGS_MT)
LIBS	=	$(SUBLIBS) -lqpe $(SYSCONF_LIBS_QT) $(SYSCONF_LIBS) $(SYSCONF_LIBS_QTAPP)
MOC	=	$(SYSCONF_MOC)
UIC	=	$(SYSCONF_UIC)

####### Target

DESTDIR = ../bin/
VER_MAJ = 1
VER_MIN = 0
VER_PATCH = 0
TARGET	= chess
TARGET1 = lib$(TARGET).so.$(VER_MAJ)

####### Files

HEADERS =	chess.h
SOURCES =	chess.cpp \
		main.cpp
OBJECTS =	chess.o \
		main.o \
		mainwindow.o
INTERFACES =    mainwindow.ui
UICDECLS =      mainwindow.h
UICIMPLS =      mainwindow.cpp
SRCMOC	=	moc_chess.cpp \
		moc_mainwindow.cpp
OBJMOC	=	moc_chess.o \
		moc_mainwindow.o


####### Implicit rules

.SUFFIXES: .cpp .cxx .cc .C .c

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules


all: $(DESTDIR)$(TARGET)

$(DESTDIR)$(TARGET): $(UICDECLS) $(OBJECTS) $(OBJMOC) $(SUBLIBS)
	$(SYSCONF_LINK) $(LFLAGS) -o $(DESTDIR)$(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)

moc: $(SRCMOC)

tmake:
	tmake chess.pro

clean:
	-rm -f $(OBJECTS) $(OBJMOC) $(SRCMOC) $(UICIMPLS) $(UICDECLS)
	-rm -f *~ core
	-rm -f allmoc.cpp

####### Extension Modules

listpromodules:
	@echo 

listallmodules:
	@echo 

listaddonpromodules:
	@echo 

listaddonentmodules:
	@echo 


REQUIRES=

####### Sub-libraries


###### Combined headers



####### Compile

chess.o: chess.cpp \
		$(QPEDIR)/include/qpe/config.h \
		$(QPEDIR)/include/qpe/resource.h \
		chess.h

main.o: main.cpp \
		mainwindow.h

mainwindow.h: mainwindow.ui
	$(UIC) mainwindow.ui -o $(INTERFACE_DECL_PATH)/mainwindow.h

mainwindow.cpp: mainwindow.ui
	$(UIC) mainwindow.ui -i mainwindow.h -o mainwindow.cpp

mainwindow.o: mainwindow.cpp \
		mainwindow.h \
		mainwindow.ui

moc_chess.o: moc_chess.cpp \
		chess.h

moc_mainwindow.o: moc_mainwindow.cpp \
		mainwindow.h

moc_chess.cpp: chess.h
	$(MOC) chess.h -o moc_chess.cpp

moc_mainwindow.cpp: mainwindow.h
	$(MOC) mainwindow.h -o moc_mainwindow.cpp



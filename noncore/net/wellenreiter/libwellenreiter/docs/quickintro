
Name:   libwellenreiter
Author: Martin J. Muench

NOTE: This is just a very short summary of the functions included 
in libwellenreiter, written because a lack of time. The whole 
library will be rewritten with extended documentation and 
test programs.

-- 
Wellenreiter types:
In proto.hh the following type (wl_network_t) is declared:

typedef struct {
  int net_type;    /* 1 = Accesspoint ; 2 = Ad-Hoc   */
  int ssid_len;    /* Length of SSID                 */
  int channel;     /* Channel                        */
  int wep;         /* 1 = WEP enabled ; 0 = disabled */
  char mac[64];    /* MAC address of Accesspoint     */
  char bssid[128]; /* BSSID of Accesspoint           */
} wl_network_t;

When a network is found, the structure has to be set and 
sent to the send_network_found() function.

When the GUI receives a found network string it calls the 
get_network_found() function to get its own structure set.

--
Included functions:

--
Protocol:

Send a found network to GUI:
int send_network_found (const char *, int, void *);

The first two arguments are the guihost and the guiport.
The third is the filled structure (wl_network_t), that will 
be send to the GUI.

Setup structure for found network:
int get_network_found (void *, const char *);

When the GUI receives a new network found packet it calls
this function and passes a wl_network_t structure and the
received buffer. The function will strip the data from
the buffer and set it to the structure.

--
Log to syslog/info:
void wl_loginfo(const char *, ...);

Log to syslog/err:
void wl_logerr(const char *, ...);

Use like printf() function with format strings and so on.

--
Setup udp socket for incoming commands:
int commsock(const char *, int);

Fist argument is the host where it should listen and second
is the port.

Return values: 

Send command to udp socket:
int sendcomm(const char *, int, const char *, ...);

First two arguments are the host and port where the command should
be send to, followed by buffer that should be send.


---

Thats it for the moment.

mjm.
